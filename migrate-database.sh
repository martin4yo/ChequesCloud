#!/bin/bash

echo "============================================"
echo "   MIGRACI√ìN COMPLETA DE BASE DE DATOS"
echo "   Local ‚Üí Producci√≥n"
echo "============================================"
echo

echo "Este script realizar√°:"
echo "1. Backup de la base de datos local"
echo "2. Restauraci√≥n en producci√≥n"
echo "3. Verificaci√≥n de los datos"
echo

read -p "¬øContinuar con la migraci√≥n completa? (s/N): " confirm
if [[ ! $confirm =~ ^[Ss]$ ]]; then
    echo "Migraci√≥n cancelada"
    exit 0
fi

echo
echo "============================================"
echo "   PASO 1: BACKUP DE BASE DE DATOS LOCAL"
echo "============================================"

# Configuraci√≥n local
LOCAL_HOST="localhost"
LOCAL_PORT="5432"
LOCAL_DB="chequescloud"
LOCAL_USER="postgres"
LOCAL_PASSWORD="Q27G4B98"

# Crear directorio para backups
mkdir -p database-backups

# Generar timestamp para nombres √∫nicos
timestamp=$(date +"%Y-%m-%d_%H-%M-%S")
backup_file="database-backups/chequescloud_migration_${timestamp}.sql"

echo "Generando backup: $backup_file"
export PGPASSWORD="$LOCAL_PASSWORD"
pg_dump -h "$LOCAL_HOST" -p "$LOCAL_PORT" -U "$LOCAL_USER" -d "$LOCAL_DB" -f "$backup_file" --verbose --clean --if-exists

if [ $? -ne 0 ]; then
    echo "‚ùå ERROR: Fall√≥ el backup de la base de datos local"
    exit 1
fi

echo "‚úÖ Backup local completado"

echo
echo "============================================"
echo "   PASO 2: CONFIGURAR CONEXI√ìN A PRODUCCI√ìN"
echo "============================================"

PROD_HOST="149.50.148.198"
PROD_PORT="5432"
PROD_DB="chequescloud"
PROD_USER="postgres"

echo "Host de producci√≥n: $PROD_HOST:$PROD_PORT"
echo "Base de datos: $PROD_DB"
echo "Usuario: $PROD_USER"
echo

read -s -p "Ingresa la contrase√±a de PostgreSQL de producci√≥n: " PROD_PASSWORD
echo

echo
echo "Probando conexi√≥n..."
export PGPASSWORD="$PROD_PASSWORD"
psql -h "$PROD_HOST" -p "$PROD_PORT" -U "$PROD_USER" -d "$PROD_DB" -c "SELECT version();" > /dev/null 2>&1

if [ $? -ne 0 ]; then
    echo "‚ùå ERROR: No se puede conectar a la base de datos de producci√≥n"
    echo
    echo "Verifica:"
    echo "- El servidor $PROD_HOST est√° accesible"
    echo "- PostgreSQL est√° corriendo en puerto $PROD_PORT"
    echo "- Las credenciales son correctas"
    echo "- El firewall permite la conexi√≥n"
    exit 1
fi

echo "‚úÖ Conexi√≥n a producci√≥n exitosa"

echo
echo "============================================"
echo "   PASO 3: VERIFICAR DATOS EXISTENTES"
echo "============================================"

echo "Datos actuales en producci√≥n:"
for table in usuarios bancos chequeras cheques; do
    count=$(psql -h "$PROD_HOST" -p "$PROD_PORT" -U "$PROD_USER" -d "$PROD_DB" -t -c "SELECT COUNT(*) FROM $table;" 2>/dev/null | xargs)
    echo "- $table: $count registros"
done

echo
echo "‚ö†Ô∏è  ADVERTENCIA: La restauraci√≥n borrar√° TODOS los datos existentes en producci√≥n"
echo
read -p "¬øContinuar con la restauraci√≥n? (s/N): " final_confirm

if [[ ! $final_confirm =~ ^[Ss]$ ]]; then
    echo "Migraci√≥n cancelada"
    echo "El backup se cre√≥ en: $backup_file"
    exit 0
fi

echo
echo "============================================"
echo "   PASO 4: RESTAURANDO BASE DE DATOS"
echo "============================================"

echo "Restaurando desde: $backup_file"
echo "Destino: $PROD_HOST:$PROD_PORT/$PROD_DB"
echo
echo "Esto puede tomar varios minutos..."

psql -h "$PROD_HOST" -p "$PROD_PORT" -U "$PROD_USER" -d "$PROD_DB" -f "$backup_file" --quiet

if [ $? -ne 0 ]; then
    echo "‚ùå ERROR: La restauraci√≥n fall√≥"
    echo
    echo "El archivo de backup se conserva en: $backup_file"
    echo "Revisa los logs para m√°s detalles"
    exit 1
fi

echo "‚úÖ Restauraci√≥n completada"

echo
echo "============================================"
echo "   PASO 5: VERIFICACI√ìN FINAL"
echo "============================================"

echo "Verificando datos migrados:"
echo

for table in usuarios bancos chequeras cheques; do
    count=$(psql -h "$PROD_HOST" -p "$PROD_PORT" -U "$PROD_USER" -d "$PROD_DB" -t -c "SELECT COUNT(*) FROM $table;" 2>/dev/null | xargs)
    echo "- $table: $count registros"
done

echo
echo "Verificando integridad de datos..."

# Verificar que las relaciones est√©n intactas
related_count=$(psql -h "$PROD_HOST" -p "$PROD_PORT" -U "$PROD_USER" -d "$PROD_DB" -t -c "SELECT COUNT(*) FROM cheques c JOIN chequeras ch ON c.chequeraId = ch.id JOIN bancos b ON ch.bancoId = b.id;" 2>/dev/null | xargs)
echo "- Relaciones intactas: $related_count cheques con banco y chequera v√°lidos"

echo
echo "============================================"
echo "   MIGRACI√ìN COMPLETADA EXITOSAMENTE"
echo "============================================"
echo
echo "‚úÖ Base de datos migrada exitosamente"
echo "üìÅ Backup guardado en: $backup_file"
echo "üåê Producci√≥n: $PROD_HOST:$PROD_PORT/$PROD_DB"
echo
echo "PR√ìXIMOS PASOS:"
echo "1. Iniciar la aplicaci√≥n en producci√≥n"
echo "2. Configurar Nginx para cheques.axiomacloud.com"
echo "3. Configurar SSL con Let's Encrypt"
echo "4. Verificar que el login funcione"
echo "5. Probar la funcionalidad completa"
echo
echo "Para configurar el dominio:"
echo "  sudo cp nginx-cheques.axiomacloud.com.conf /etc/nginx/sites-available/"
echo "  sudo ln -s /etc/nginx/sites-available/cheques.axiomacloud.com /etc/nginx/sites-enabled/"
echo "  sudo certbot --nginx -d cheques.axiomacloud.com"
echo
echo "Para iniciar en producci√≥n ejecuta:"
echo "  ./start-production.sh"
echo
echo "URL Final: https://cheques.axiomacloud.com"
echo